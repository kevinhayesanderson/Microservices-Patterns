Microservices Communications:
	Smart endpoints and dumb pipes:
	Types:
		Synchronous Communications:
			Request/Response
		Asynchronous Communications:
			Message broker event buses

Synchronous Communications:
	Request/Responses
	1.REST HTTP(S) API: (for exposing microservices)
		Public API: calls fropm client apps
		Backend API: inter-service communication
		"collection/item/collection"
	2.gRPC API: (for internal communication between microservices)
	3.GraphQL API: (querying flexible data in microservices)
		query and manipulational language for APIs
		evolve APIs without versions
		Core Concepts:
			Schema: describes all the possible data that client can query
					made up of object types
			Queries: GraphQL validate queries against the schema
			Resolver: produces the value
			Mutation: insert or update data
			
	4.WebSocket API: (real-time bi-directional communication)
		Real-time web applications
Asynchronous Communications:
	client doesn't wait for response
	AMQP(Advanced Message Queuing Protocol)
	Message brokers: Kafka, RabbitMQ
	producer doesn't wait foe the response
	2 Types:
		One to one - queue - command pattern
		one to many - topic - pub/sub event bus or messaage broker
		
Communication Styles:
	Request/Response: 
		HTTP and REST Protocol
		extends gRPC & GraphQL
	Push and real-time communication:
		HTTP and WebSocket Protocol
	Pull communication:
		HTTP and AMQP
		short & long polling
	Event Driven communication:
		AMQP
		Pub/Sub Model
	Hybrid:
	
API Gateways:
	