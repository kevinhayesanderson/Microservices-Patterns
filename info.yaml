Microservices Paterns:
    "Evolving from Monolithic to Event-driven Microservices Architecture with designing Scalable and High Available system"

Monolithic:
    Developing complete application as a single unit
    single codebase
    single big deployment
    Tight Coupled
    Interconnected code
    Advantage:
        Easy to get start and debug
    Disadvantage:
        Difficult to manage
        Hard to implement new features
    When to use:
        Small application
        Scale vertically (scale up) is fast:
            With vertical scaling, also known as “scaling up” or “scaling down,” you add or subtract power to an existing cloud server upgrading memory (RAM), storage or processing power (CPU). 
        Simple application with predictable scale and complexity
        PoC and Quick Launch
    Challenges:
        Becomes complex over time - hard to understand
        Hard to make new change, becoz of tight coupling
        Small change requires full deployment of entire app
        Barrier to new technology adoption
        Difficult to scale:
            can't scale components independently, can only scale the whole application
    Design Principles:
        DRY:
            Don't Repeat Yourself
        KISS:
            Keep it Simple, Stupid
        YAGNI:
            You Ain't Gonna Need It
            
    Clean Architecture:
        The layers of Clean Architecture are: 
            Domain Layer:
                the Domain Layer contains the core entities and business rules
            Application Layer:
                the Application Layer handles business logic
            Presentation Layer:
                The Presentation Layer handles user interface and user interactions
            Infrastructure Layer:
                Infrastructure Layer contains the low-level technical details such as databases, APIs, and external services.

Modular Monolithic:
    Macroservices:

Microservices:
    small, independent and loosely coupled services
    technology agnostic
    each services has it's own database
    bounded context
    Challenges:
        complexity, each service is simple, but the entire system is complex
        network problems and latency : fault tolerance
        development and testing integration and end to end testing the processes
        data integrity
            eventual consistency where possible
        deployment initially
        Logging & Monitoring
        Debugging
    When to Use:
        independently deploy and zero downtime
        independently scale
        data partitioning
    When not to use:
        Antipatern:
            Shared database
            Don't do distributed monolith
            Don't do Microservices without DevOps or Cloud services
        Limited team size    
        Brand new products
            Stablize domain model
    Design Patern:
        Database per service pattern:
            polygot persistence: different type of database
    Main Considerations:
        Decomposition - breaking down services
        Communication between services
        Data management
        
        Transaction Management
        Deployments
        Resilience
    Decomposition - breaking down services:
        Microservices Decomposition Patterns:
            Domain Analysis -> Bounded Contexts -> Decompose Strategies -> Identify Microservices Boundaries
            Decompose services by Scalability requirements:
                Scale Cube:
                    x-axis - horizontal duplication - scale by Cloning - scale out - monolith
                    y-axis - funtional decomposition - scale by Splitting small services - Microservices
                    z-axis - data partitioning - scale by splitting data
        1. Decompose by business capability pattern:
            services must be cohesive
            services must br loosely coupled
        2. Decompose by Subdomain:
            DDD Subdomains
            Bounded Context Pattern: (Domain-Driven Design)
                2 Phases:
                    Strategic
                    Tactical
                Strategic DDD:
                    models defined by business rules and have context map between them
                Tactical DDD:
                    focuses on implmentation
                Concepts:
                    entity, aggregate, value object, repository, domain service
                bounded Context - logical Boundaries - self consistent and independent
            Context Mapping pattern:
                Context map is a way to define logical boundaries between domains
            Bounded Context can have more than one Microservices:
            Domain Analysis:
                1.Nouns and Verbs in user stories
                2.construct Object interaction and responsibility diagram - domain diagrams - mostly reveal bounded Context
                3.identity Synchronous and Asynchronous usecase
                4.Identify and Decompose Microservices
                    Types:
                        Main Microservices - exposed to clients - mostly sync communications
                        Transactional Microservices - mostly Async Communications
                        Inteligence Microservices
                
        Checklist:
            1. Microservices should do one-thing
            2. Microservices size should not ne too big and not too Small
            3. Chatty Communications - Combine services
            4. No Locking Dependencies - inter-service Dependencies > 2 or 3 - required to deploy together - redesign
            5. Should be possible deploy a single service without re-deploy another services
Serverless:
    Nanoservices

Problem->Learn->Design->Adapt->Evaluate->:

Decisions:
    - Design your system with focusing on context and non-functional requirements (-ilities).
    - Design decision must be justified by a business requirement.
    - Grow applications with metrics
    
How to understand domain:
    - Gather funtional requirements
    - Convert functional requirements to use cases(User Stories):
        - eg: As a user I want to list products
    - Gather Non-Functional requirements
        - Scalability (Major)
        - Availability (Major)
        - Reliability
        - Maintability
        - Usability
        - Eficiency

For Usability and Eficiency:
    Request per Second and Acceptable Latency:
    Concurrent Users    Requests/Second     Latency(Excepted):
    2k                  500                
    20k                 12k                 
    100k                80k                 <=2 sec
    500k                300k                ?
 
 S.O.L.I.D:
    Single responsibility
    Open-Closed Principle
    Liskov's Substitution Principle
    Interface Segregation
    Dependency Inversion
    
Monolithic Problems:

    Problem: Code Become too complex over time
    Solution: N-Layer Architecture
        horizontal logical layers
        separation of concerns
        layers of isolation
    N-FR: Maintability

    Problem: Highly Coupling Dependant layers
    Solution: Clean Architecture & Dependency Rule
    N-FR: Flexibility, Testability

    Problem: Increased Traffic, Handle more Request
    Solution: Vertical and Horizontal scaling & Load balancer
    N-FR: Scalability
    
Modular Monolithic Problems:
    Problem: Scale and deploy modules independently
    Solution: Microservices Architecture

Microservices Problems:
    Problem: Direct Client-to-Service Communication
    Solution: Microservices Communication Patterns(API Gateway, BFF(Backend for Front-End), Pub/Sub...etc)
    
    Problem: Multiple Request for Retrieve Relational Data(N+1)
    Solution: GraphQL API - quering Structural Relational data
    
    Problem: inter-service Communication makes heavy load on network Traffic
    Solution: gRPC APIs
    
    Problem: Real Time chat with Support agent
    Solution: WebSocket APIs
    
    Problem: Client Apps has different UI requirements
    Solution:Client Focused Interfaces: BFF(Backend for Frontend Pattern)
    
    Problem: Service-to-Service Communications Chain Queries
    Solution: Aggregate Query operations: Service Aggregator Pattern
    
    Problem: Long running operations in Sync operations
    Solution: Async way of communications
    
    Problem: Databases Bottlenecks when scaling
    Solution: Scale stateful applications horizontal scaling
              Service and Data Partitioning along Business Boundaries - Shards/Pods
              Use NoSQL Database to gain easy partitioning features